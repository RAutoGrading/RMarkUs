myscalar <- 99
# Test Vector function
testVector(variableName = "myvector",
variables = variables,
studentSoln = myvector,
actualSoln = c("a","b","c"),
check_present = TRUE,
check_correct = TRUE,
check_size = TRUE,
check_datatype = TRUE,
datatype = "character",  # add type
order = TRUE)
testVector(variableName = "myvector",
variables = variables,
studentSoln = myvector,
actualSoln = c("a","b","c"),
check_present = TRUE,
check_correct = TRUE,
check_size = TRUE,
check_datatype = TRUE,
datatype = "double",
type="scalar",
order = TRUE)
testVector(variableName = "myvector",
variables = variables,
studentSoln = myvector,
actualSoln = c("a","b","c"),
check_present = TRUE,
check_correct = TRUE,
check_size = TRUE,
check_datatype = TRUE,
datatype = "character",
type = "scalar",
order = TRUE)
soln <- list(myvector, myscalar)
soln$myvector
soln
soln <- list(myvector=myvector, myscalar=myscalar)
soln$myvector
soln$myvec
testVector(variableName = "myscalar",
variables = variables,
studentSoln = myscalar,
actualSoln = 99,
check_present = TRUE,
check_correct = TRUE,
check_size = TRUE,
check_datatype = TRUE,
datatype = "double",
type="scalar",
order = TRUE)
testVector(variableName = "myvector",
variables = variables,
studentSoln = myvector,
actualSoln = c("a","b","c"),
check_present = TRUE,
check_correct = TRUE,
check_size = TRUE,
check_datatype = TRUE,
datatype = "character",
type = "scalar",
order = TRUE)
mymat <- matrix(1:4, nrow=2)
length(mymat)
setwd("C:/Users/natha/Dropbox/UniversityOfToronto/SoTL/RAutoGrading/RMarkUs")
source("R/autotests.R")
source("R/generateData.R")
source("R/RMarkUs.R")
testScalar(variableName = "myvector",
variables = variables,
studentSoln = myvector,
actualSoln = c("a","b","c"),
check_present = TRUE,
check_correct = TRUE,
check_datatype = TRUE,
order = TRUE)
myvector <- c("a","b","c")
mymat <- matrix(1:4, nrow=2)
variables <- c("myvector", "myscalar")
soln <- list(myvector=myvector, myscalar=myscalar)
myscalar <- 99
testScalar(variableName = "myvector",
variables = variables,
studentSoln = myvector,
actualSoln = c("a","b","c"),
check_present = TRUE,
check_correct = TRUE,
check_datatype = TRUE,
order = TRUE)
testScalar(variableName = "myvector",
variables = variables,
studentSoln = myvector,
actualSoln = c("a","b","c"),
check_present = TRUE,
check_correct = TRUE,
check_datatype = TRUE)
length(actualSoln)
testScalar
source("R/testFunctions.R")
testScalar
testScalar(variableName = "myvector",
variables = variables,
studentSoln = myvector,
actualSoln = c("a","b","c"),
check_present = TRUE,
check_correct = TRUE,
check_datatype = TRUE)
source("R/testFunctions.R")
testScalar(variableName = "myvector",
variables = variables,
studentSoln = myvector,
actualSoln = c("a","b","c"),
check_present = TRUE,
check_correct = TRUE,
check_datatype = TRUE)
testVector(variableName = "myvector",
variables = variables,
studentSoln = myvector,
actualSoln = c("a","b","c"),
check_present = TRUE,
check_correct = TRUE,
check_datatype = TRUE)
testVector(variableName = "myvector",
variables = variables,
studentSoln = myvector,
actualSoln = c("a","b","c"),
check_present = TRUE,
check_correct = TRUE,
check_datatype = TRUE,
datatype = "double")
testVector(variableName = "myvector",
variables = variables,
studentSoln = myvector,
actualSoln = c("a","b","c"),
check_present = TRUE,
check_correct = TRUE,
check_datatype = TRUE,
datatype = "character")
source("R/testFunctions.R")
testVector(variableName = "myvector",
variables = variables,
studentSoln = myvector,
actualSoln = c("a","b","c"),
check_present = TRUE,
check_correct = TRUE,
check_datatype = TRUE,
datatype = "character")
testVector(variableName = "myvector",
variables = variables,
studentSoln = myvector,
actualSoln = c("a","b","c"),
check_present = TRUE,
check_correct = TRUE,
check_datatype = TRUE)
testScalar(variableName = "myscalar",
variables = variables,
studentSoln = myscalar,
actualSoln = 3,
check_present = TRUE,
check_correct = TRUE,
check_datatype = TRUE,
datatype = "character")
testScalar(variableName = "myscalar",
variables = variables,
studentSoln = myscalar,
actualSoln = 3,
check_present = TRUE,
check_correct = TRUE,
check_datatype = TRUE,
datatype = "double")
testScalar(variableName = "myscalar",
variables = variables,
studentSoln = myscalar,
actualSoln = 3,
check_present = TRUE,
check_correct = TRUE,
check_datatype = TRUE,
datatype = "character")
source("R/testFunctions.R")
testScalar(variableName = "myscalar",
variables = variables,
studentSoln = myscalar,
actualSoln = 3,
check_present = TRUE,
check_correct = TRUE,
check_datatype = TRUE,
datatype = "character")
testScalar(variableName = "myscalar",
variables = variables,
studentSoln = myscalar,
actualSoln = 3,
check_present = TRUE,
check_correct = TRUE,
check_datatype = TRUE,
datatype = "double")
testScalar(variableName = "myscalar",
variables = variables,
studentSoln = myscalar,
actualSoln = 3,
check_present = TRUE,
check_correct = TRUE,
check_datatype = TRUE,
datatype = "logical")
testScalar(variableName = "myscalar",
variables = variables,
studentSoln = myscalar,
actualSoln = 3,
check_present = TRUE,
check_correct = TRUE,
check_datatype = TRUE,
datatype = "character")
testScalar(variableName = "myscalar",
variables = variables,
studentSoln = myscalar,
actualSoln = 3,
check_present = TRUE,
check_correct = TRUE,
check_datatype = TRUE,
datatype = "double")
myfactor <- factor(1:3)
myfactor
class(myfactor)
is.double(myfactor)
is.factor(myfactor)
myfac2 <- factor(3:1)
myfac2
myfac2==myfac1
myfac2==myfac
myfac2==myfactor
myfac1
myfactor[1]
length(myfactor[1])
source("R/testFunctions.R")
testScalar(variableName = "myscalar",
variables = variables,
studentSoln = myscalar,
actualSoln = 3,
check_present = TRUE,
check_correct = TRUE,
check_datatype = TRUE,
datatype = "factor")
is.vector(mymat)
is.vector(3)
is.vector(c(1,2,3))
is.list(c(1,2,3))
is.list(myfactor)
is.vector(myfactor)
class(myfactor)
myfactor
is.numeric(myfactor)
mytibble <- tibble(a=1:3, b=4:6)
library(tidyverse)
mytibble <- tibble(a=1:3, b=4:6)
mytibble
is.tibble(mytibble)
is_tibble(mytibble)
is.data.frame(mytibble)
testScalar(variableName = "myscalar",
variables = variables,
studentSoln = myscalar,
actualSoln = 3,
check_present = TRUE,
check_correct = TRUE,
check_datatype = TRUE,
datatype = "factor")
library(survival)
data <- data.frame(status=c(1,1,1,0,0,0), times=c(1,2,3,4,5,6))
km <- survfit(times ~ status, data=data)
km <- survfit(Surv(times ~ status), data=data)
km <- survfit(Surv(data$times ~ data$status))
data
glimpse(data)
km <- survfit(Surv(data$times,data$status)~1)
expect_equal(km,km)
expect_equal(km,data)
km2 <- survfit(Surv(times,status)~1, data=data)
expect_equal(km,km2)
expect_equivalent(km,km2)
expect_equivalent(km,km)
km
summary(km)
expect_equivalent(summary(km), summary(km2))
expect_equivalent(summary(km), summary(km))
str(km)
expect_equivalent(km$n, km2$n)
expect_equivalent(km$surv, km2$surv)
expect_equivalent(str(km), str(km2))
expect_equivalent(str(km), str(km2))
class(str(km))
str(km)$surv
km$surv
?expect_type
typeof(3)
typeof(3L)
expect_class(3)
expect_s3_class(3)
expect_s3_class(3, "numeric")
expect_type(3, "numeric")
expect_type(3)
expect_class(3)
typeof(3L)
getwd()
roxygen2::roxygenize()
roxygen2::roxygenize()
devtools::document()
roxygen2::roxygenize("RMarkUs")
rlang::last_trace()
getwd()
roxygen2::roxygenize("../RMarkUs")
roxygen2::roxygenize("RMarkUs")
roxygen2::roxygenize("RMarkUs")
roxygen2::roxygenize("")
roxygen2::roxygenize()
library(RMarkUs)
remove.packages("RMarkUs")
git_install("RAutoGrading/RMarkUs")
install_git("RAutoGrading/RMarkUs")
install_github("RAutoGrading/RMarkUs")
library(devtools)
install_github("RAutoGrading/RMarkUs")
library(RMarkUs)
.rs.restartR()
remove.packages("RMarkUs")
library(RMarkUs)
library(devtools)
install_github("RAutoGrading/RMarkUs")
.rs.restartR()
d
x
library(devtools)
install_github("RAutoGrading/RMarkUs")
library(RMarkUs)
testScalar(variableName = "a", variables = list("a"), studentSoln = 13, actualSoln = 13)
testScalar(variableName = "a", variables = list("a"), studentSoln = 13, actualSoln = 13, check_present=TRUE, check_datatype=TRUE, datatype="numeric", check_correct=TRUE)
testVector(variableName = "a", variables = list("a"), studentSoln = 13, actualSoln = 13, check_present=TRUE, check_datatype=TRUE, datatype="numeric", check_correct=TRUE)
testVector
library(RMarkUs)
install.packages("Rtools")
.Rinfo
.Rinfo()
.Rinfo()
Rinfo()
R.Version()
library(Rtools)
install.packages("Rtools")
install.packages(c("htmltools", "httr2", "lme4", "MatrixModels", "RcppEigen", "rlang", "stringi", "stringr"))
has_rtools()
library(roxygen2)
getwd()
roxygenise()
rm(list = c("correctAttributes", "correctLengthTest", "correctSizeTest", "correctSolnTest", "dataTypeTest",
"variableClassTest", "variableExistsTest"))
roxygenise()
devtools::check()
devtools::check(document=TRUE)
library(RMarkUs)
RMarkUs::testVector
expect_identical
?expect_identical
?expect
?oxygenise
library(roxygen2)
getwd()
roxygen2::oxygenise()
roxygen2::roxygenise()
getwd()
devtools::check()
remove.packages("RMarkUs")
install_github("RAutoGrading/RMarkUs")
library(devtools)
install_github("RAutoGrading/RMarkUs")
install_github("RAutoGrading/RMarkUs")
library(devtools)
install_github("RAutoGrading/RMarkUs")
getwd()
library(RMarkUs)
dataTypeTest2 <- function(variableName, variables, studentSoln, datatype, error_message=NULL) {
if (is.null(error_message)) {
error_message = "Incorrect data type"
}
success_message = "Correct data type"
test_name <- paste(variableName, "datatype test")
tryCatch (
{
variableExistsTest(variableName, variables, error_message)
test_that(test_name, {expect_type(studentSoln, datatype)})
print(success_message)
},
error = function(e) {
message(error_message)
}
)
}
dataTypeTest("myanswer", variables, 5, "double")
dataTypeTest("myanswer", variables, 5, "character")
library(roxygen2)
roxygen2::oxygenise()
roxygen2::roxygenise()
devtools::check()
roxygen2::roxygenise()
devtools::check()
remove.package("RMarkUs")
remove.packages("RMarkUs")
library(devtools)
install_github("RAutoGrading/RMarkUs")
devtools::check()
is.list("hello")
library(devtools)
devtools::check()
devtools::check()
library(tidyverse)
getwd()
library(tidyverse)
tib <- tibble(x=1)
tib
tib <- tibble(x=999)
tib
length(tib)
actualSoln = 999
datatype=NULL
class(tib)
class(actualSoln)
studentSoln
studentSoln = tib
studentSoln
as.numeric(studentSoln)
as.vector(tib)
as.vector(tib) %>% class()
as.vector(tib) %>% unlist() %>% class()
as.vector(tib) %>% unlist()
as.vector(tib) %>% unlist() %>% str()
as.numeric(tib) %>% str()
correctSolnTest(1,1,tib,999)
library(devtools)
install_github("RAutoGrading/RMarkUs")
library(RMarkUs)
correctSolnTest(1,1,tib,999)
correctSolnTest(1,1,tib,999,type="scalar")
correctSolnTest(1,1,tib,999)
tib2 <- tibble(x=c("a","b","c"))
tib2
as.vector(tib2)
as.vector(tib2) %>% unlist()
as.vector(tib2) %>% unlist() %>% class()
testVector_raw <- function(variableName, variables, studentSoln, actualSoln,
check_correct=TRUE, correct_error_msg=NULL,
check_present=TRUE, present_error_msg=NULL,
check_length=TRUE, size_error_msg=NULL,
check_datatype=FALSE, data_error_msg=NULL,
datatype=NULL,
type='vector',
order=TRUE) {
# Validating inputs
if (isTRUE(check_datatype)){
if (is.null(datatype)){
stop("The testVector function requires a value for datatype when check_datatype=TRUE.")
}
if(!(datatype %in% c("numeric", "character", "logical", "double"))){
stop("The testVector function received an invalid value for the datatype argument; valid values are numeric, character, and logical")
}
if (datatype == "numeric" & !is.numeric(actualSoln)){
stop("In testVector you indicated the datatype was 'numeric' but actualSoln is not a numeric; the datatype of actualSoln should agree with the value passed for datatype")
}
else if (datatype == "logical" & !is.logical(actualSoln)){
stop("In testVector you indicated the datatype was 'logical' but actualSoln is not a logical; the datatype of actualSoln should agree with the value passed for datatype")
}
else if (datatype == "character" & !is.character(actualSoln)){
stop("In testVector you indicated the datatype was 'character' but actualSoln is not a character object; the datatype of actualSoln should agree with the value passed for datatype")
}
else if (datatype == "double" & !is.double(actualSoln)){
stop("In testVector you indicated the datatype was 'double' but actualSoln is not a double object; the datatype of actualSoln should agree with the value passed for datatype")
}
}
if (type == "vector" & !is.vector(actualSoln)){
stop("In testVector, you passed type='vector' but actualSoln is not a vector")
}
if (type == "scalar" & length(actualSoln) > 1){
stop("In testVector, you passed type=scalar but actualSoln has length greater than 1.")
}
simplify_student_answer <- TRUE
if(isTRUE(simplify_student_answer)){
# Try to convert the student's answer to a simpler datatype for comparison (e.g. tibble to single number)
if(is.data.frame(studentSoln)){
warning(paste("You submitted a dataframe when an object with datatype", datatype, "was expected"))
if(ncol(studentSoln)==1 | nrow(studentSoln)==1){
studentSoln <- studentSoln %>% as.vector() %>% unlist()
datatype <- class(studentSoln)
}
}
}
# Unit tests
if (isTRUE(check_present)) {
variableExistsTest(variableName, variables, error_message=present_error_msg)
}
if (isTRUE(check_datatype)) {
if (datatype == "numeric"){
# If student solution is integer, convert to double to facilitate comparison
if(is.integer(studentSoln)){
studentSoln <- as.double(studentSoln)
}
# In this case, we'll call dataTypeTest with 'double' because
datatype <- "double"
}
dataTypeTest(variableName, variables, studentSoln, datatype, error_message=data_error_msg)
}
if (isTRUE(check_length)) {
correctLengthTest(variableName, variables, studentSoln, actualSoln, type=type, error_message=size_error_msg)
}
if (isTRUE(check_correct)) {
correctSolnTest(variableName, variables, studentSoln, actualSoln, type=type, order, error_message=correct_error_msg)
}
}# end testVector_raw
